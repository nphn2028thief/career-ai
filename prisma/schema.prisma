// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  userId          String           @unique // Clerk user id
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  bio             String?
  experience      Float? // Years of experience
  skills          String[]
  assessment      Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model IndustryInsight {
  id              String        @id @default(cuid())
  industry        String        @unique
  users           User[]
  salaryRanges    Json[] // Array of { role: string, min: float, medium: float, max: float, location?: string }
  growthRate      Float
  demandLevel     DemandLevel // Low, medium or high
  topSkills       String[] // Most in-demand skill
  marketOutlook   MarketOutlook
  keyTrends       String[]
  recommendSkills String[]
  lastUpdated     DateTime      @default(now())
  nextUpdated     DateTime

  @@index([industry])
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  User           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String? // AI-generated improvement tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  User      User?    @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id          String   @id @default(cuid())
  userId      String   @unique
  User        User?    @relation(fields: [userId], references: [id])
  content     String
  jobDesc     String?
  companyName String
  jobTitle    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

enum DemandLevel {
  LOW
  MEDIUM
  HIGH
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
